"""
DO NOT EDIT! THIS IS AN AUTOGENERATED FILE!!!!!
"""
import io
import uuid
from typing import Optional

import s3fs
from fastapi import UploadFile, File, Depends, HTTPException
import pandas as pd
from utils.enums import *
from core.api.sento_router import SentoRouter
from core.database.db import get_db
from schemas.equipment_list import equipment_list as Schemaequipment_list
from schemas.equipment_list import equipment_listCreate as Schemaequipment_listCreate
from schemas.equipment_list import equipment_listUpdate as Schemaequipment_listUpdate
from schemas.equipment_list import equipment_listUpsert as Schemaequipment_listUpsert
from sqlalchemy.orm import Session
from sqlalchemy.ext.declarative import DeclarativeMeta as Model
from core.api import _utils

from data.equipment_list_item import equipment_list_item as data_equipment_list_item

from datetime import datetime

from models.equipment_list import equipment_list as Modelequipment_list

def get_all_filter_function(project_id:Optional[int]=None):
	return {"project_id":project_id}


get_all_filter_meta = {'project_id': {'condition': '==', 'column': 'project_id'}}


model_router = SentoRouter(
                    schema=Schemaequipment_list,
                    db = get_db,
                    prefix="equipment",
                    db_model=Modelequipment_list,
                    create_schema = Schemaequipment_listCreate,
                    update_schema = Schemaequipment_listUpdate,
                    upsert_schema = Schemaequipment_listUpsert,
                    get_all_filter_function= get_all_filter_function,
                    get_all_filter_meta = get_all_filter_meta,
                    create_one_callback=False,
                    update_one_callback=False,
                    delete_one_callback=False,
                    delete_all_callback=False,
                    unique_fields=[]
                )

@model_router.post("/upload")
async def upload(project_id: int, file: UploadFile = File(...), db: Session = Depends(get_db)):
    file_name = file.filename
    bucket_name = "643553455790-eu-west-1-files"
    file_uuid = str(uuid.uuid4())

    print(file.content_type)

    s3_key = f"uploads/project_id={project_id}/equipment_lists/{file_uuid}/{file_name}"

    fs = s3fs.S3FileSystem(anon=False)

    try:
        await file.seek(0)  # Reset file pointer to the beginning
        contents = await file.read()
        s3_path = f"{bucket_name}/{s3_key}"
        with fs.open(s3_path, "wb") as f:
            f.write(contents)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"S3 upload failed: {str(e)}")


    db_model: Model = Modelequipment_list(
        project_id=project_id,
        file_name=file_name,
        type = file.content_type,
        #file_uuid=file_uuid,
        s3_key=s3_key,
        modified_on=_utils.get_modified_on()
    )
    db.add(db_model)
    db.commit()
    db.refresh(db_model)

    await file.seek(0)
    contents = await file.read()
    df = pd.read_excel(io.BytesIO(contents), engine="openpyxl")

    df_reset = df.reset_index()

    for row_idx, row in df_reset.iterrows():
        for col_idx, col_name in enumerate(df.columns):
            cell_item = data_equipment_list_item(
                equipment_list_id=db_model.id,
                row_id = row_idx +1,
                column_id= col_idx +1,
                field = col_name,
                value= str(row[col_name])
            )
            cell_item.save(db)

    db.commit()

    return db_model

