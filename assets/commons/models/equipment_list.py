"""
DO NOT EDIT! THIS IS AN AUTOGENERATED FILE!!!!!
"""

from datetime import datetime
from sqlalchemy.types import (
    Integer,
    BigInteger,
    String,
    DateTime,
    Float,
    Boolean,
    PickleType,
    Enum,
)
from sqlalchemy.schema import Column, UniqueConstraint, Index, ForeignKey
from sqlalchemy.sql import text, true, false
from sqlalchemy.sql.functions import func, Function
from sqlalchemy.orm import relationship, Mapped, mapped_column
from sqlalchemy.dialects.postgresql import JSONB, ARRAY

from utils.enums import *
from core.database.base_model import Base


class equipment_list(Base):
    __tablename__ = "equipment_list"

    id: Mapped[int] = mapped_column(
        Integer, nullable=False, primary_key=True, autoincrement=True
    )
    project_id: Mapped[int] = mapped_column(
        Integer,
        ForeignKey("project.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )
    file_name: Mapped[str] = mapped_column(String, nullable=False)
    type: Mapped[str] = mapped_column(String, nullable=False)
    s3_key: Mapped[str] = mapped_column(String, nullable=True)
    modified_on: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), onupdate=func.now()
    )


# Probably want to implement a trigger dealing with this at the DB level instead.
# This will update even if values do not change
equipment_list._set_onupdate = {
    k: v.onupdate.arg
    for k, v in equipment_list.__table__.columns.items()
    if v.onupdate is not None and isinstance(v.onupdate.arg, Function)
}
